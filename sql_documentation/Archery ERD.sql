CREATE TYPE "sex_enum" AS ENUM (
  'male',
  'female'
);

CREATE TYPE "type_participant_score_enum" AS ENUM (
  'competition',
  'practice'
);

CREATE TYPE "status_enum" AS ENUM (
  'eligible',
  'ineligible',
  'in progress',
  'pending'
);

CREATE TYPE "type_request_form_enum" AS ENUM (
  'participating',
  'recording'
);

CREATE TYPE "action_request_form_enum" AS ENUM (
  'enrol',
  'withdraw'
);

CREATE TYPE "unit_of_length_enum" AS ENUM (
  'mm',
  'cm',
  'dm',
  'm',
  'dam',
  'hm',
  'km',
  'in',
  'ft',
  'yd',
  'mi',
  'nmi',
  'Âµm',
  'nm',
  'pm',
  'fm',
  'ly',
  'au',
  'pc'
);

CREATE TYPE "level_enum" AS ENUM (
  'beginner (< 1 year of expereince)',
  'semi-intermediate (>= 1 year of experience)',
  'intermediate (>= 2 year of experience )',
  'semi-advanced (>= 4 years of experience )',
  'advanced (>= 6 years of experience)',
  'professional (>= 10 year of experience)',
  'expert (>= 20 year of experience)'
);

CREATE TABLE "account" (
  "account_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email_address" varchar(255) NOT NULL,
  "hash_password" varchar(255) NOT NULL,
  "fullname" varchar(2253) NOT NULL,
  "country" varchar(255) NOT NULL,
  "date_of_birth" date NOT NULL,
  "sex" sex_enum NOT NULL,
  "avatar_url" text DEFAULT 'https://ghcpcyvethwdzzgyymfp.supabase.co/storage/v1/object/public/User%20Avatar/Account_Avatar/Default_Avatar.jpg',
  "deactivated" bool NOT NULL DEFAULT false,
  "created_at" timestamptz,
  "updated_at" timestamptz
);

CREATE TABLE "admin" (
  "admin_id" int PRIMARY KEY
);

CREATE TABLE "recorder" (
  "recorder_id" int PRIMARY KEY,
  "year_of_experience" int NOT NULL,
  "about_recorder" text NOT NULL
);

CREATE TABLE "recording" (
  "recording_id" int,
  "club_competition_id" int,
  PRIMARY KEY ("recording_id", "club_competition_id")
);

CREATE TABLE "archer" (
  "archer_id" int PRIMARY KEY,
  "default_equipment_id" int NOT NULL,
  "club_id" int,
  "level" level_enum NOT NULL,
  "about_archer" text NOT NULL DEFAULT 'I love archery'
);

CREATE TABLE "club" (
  "club_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "creator_id" int NOT NULL,
  "min_age_to_join" smallint NOT NULL DEFAULT 10,
  "max_age_to_join" smallint NOT NULL DEFAULT 70,
  "open_to_join" bool NOT NULL DEFAULT true,
  "formation_date" date NOT NULL,
  "about_club" text NOT NULL,
  "club_logo_url" text NOT NULL DEFAULT 0
);

CREATE TABLE "australia_archery_federation" (
  "member_id" int PRIMARY KEY
);

CREATE TABLE "participating" (
  "participating_id" int,
  "event_context_id" text NOT NULL,
  "score_1st_arrow" smallint NOT NULL DEFAULT 0,
  "score_2nd_arrow" smallint NOT NULL DEFAULT 0,
  "score_3rd_arrow" smallint NOT NULL DEFAULT 0,
  "score_4th_arrow" smallint NOT NULL DEFAULT 0,
  "score_5st_arrow" smallint NOT NULL DEFAULT 0,
  "score_6st_arrow" smallint NOT NULL DEFAULT 0,
  "sum_score" smallint NOT NULL DEFAULT 0,
  "datetime" timestamptz NOT NULL,
  "type" type_participant_score_enum NOT NULL DEFAULT 'competition',
  "status" status_enum NOT NULL DEFAULT 'pending',
  PRIMARY KEY ("participating_id", "event_context_id", "type")
);

CREATE TABLE "event_context" (
  "event_context_id" text PRIMARY KEY,
  "yearly_club_championship_id" int,
  "club_competition_id" int NOT NULL,
  "round_id" int NOT NULL,
  "range_id" int NOT NULL,
  "end_order" int NOT NULL
);

CREATE TABLE "yearly_club_championship" (
  "yearly_club_championship_id" int PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "year" int NOT NULL,
  "creator_id" int NOT NULL,
  "eligible_group_of_club_id" int
);

CREATE TABLE "club_competition" (
  "club_competition_id" int PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "address" text NOT NULL,
  "date_start" date NOT NULL,
  "date_end" date NOT NULL,
  "creator_id" int NOT NULL,
  "eligible_group_of_club_id" int
);

CREATE TABLE "round" (
  "round_id" int PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "category_id" int NOT NULL
);

CREATE TABLE "equivalent_round" (
  "round_id" int,
  "equivalent_round_id" int,
  "date_valid_start" timestamptz,
  "date_valud_end" timestamptz,
  PRIMARY KEY ("round_id", "equivalent_round_id", "date_valid_start", "date_valud_end")
);

CREATE TABLE "range" (
  "range_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "target_face_id" int NOT NULL,
  "distance" int NOT NULL,
  "unit_of_length" unit_of_length_enum NOT NULL
);

CREATE TABLE "request_competition_form" (
  "form_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "sender_id" int NOT NULL,
  "type" type_request_form_enum NOT NULL,
  "action" action_request_form_enum NOT NULL,
  "club_competition_id" int NOT NULL,
  "round_id" int,
  "sender_word" text NOT NULL,
  "status" status_enum NOT NULL,
  "reviewer_word" text,
  "reviewed_by" int NOT NULL,
  "create_at" timestamptz,
  "updated_at" timestamptz
);

CREATE TABLE "club_enrollment_form" (
  "form_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "sender_id" int NOT NULL,
  "sender_word" text NOT NULL,
  "status" status_enum NOT NULL,
  "club_id" int NOT NULL,
  "club_creator_word" text NOT NULL,
  "create_at" timestamptz,
  "updated_at" timestamptz
);

CREATE TABLE "equipment" (
  "equipment_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar NOT NULL,
  "photo_url" text NOT NULL DEFAULT 'https://ghcpcyvethwdzzgyymfp.supabase.co/storage/v1/object/public/User%20Avatar/Equipment_Photo/Default_Equipment.png',
  "description" text NOT NULL DEFAULT 'this is an equipment officially recogized by autralia archery federation '
);

CREATE TABLE "target_face" (
  "target_face_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "diameter" int NOT NULL,
  "unit_of_length" unit_of_length_enum NOT NULL
);

CREATE TABLE "ai_conversation_history" (
  "account_id" int,
  "conversation_order" int NOT NULL,
  "prompt_response_order" int NOT NULL,
  "prompt" text NOT NULL,
  "response" text NOT NULL,
  PRIMARY KEY ("account_id", "conversation_order", "prompt_response_order")
);

CREATE TABLE "eligible_club_member" (
  "eligible_group_of_club_id" int,
  "eligible_club_id" int,
  PRIMARY KEY ("eligible_group_of_club_id", "eligible_club_id")
);

CREATE TABLE "eligible_group_of_club" (
  "eligible_group_of_club_id" int PRIMARY KEY
);

CREATE TABLE "round_schedule" (
  "club_competition_id" int,
  "round_id" int,
  "datetime_to_start" timestamptz,
  "expected_datetime_to_end" timestamptz,
  PRIMARY KEY ("club_competition_id", "round_id")
);

CREATE TABLE "account_report" (
  "report_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "reporter_id" int NOT NULL,
  "report_content" int NOT NULL,
  "evidence_pdf_file_url" text,
  "target_account_id" int NOT NULL,
  "status" status_enum NOT NULL DEFAULT 'pending',
  "decision_made_by" int NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL
);

CREATE TABLE "age_division" (
  "age_division_id" int PRIMARY KEY,
  "min_age" smallint NOT NULL DEFAULT 10,
  "max_age" smallint NOT NULL DEFAULT 70
);

CREATE TABLE "discipline" (
  "discipline_id" int PRIMARY KEY,
  "name" varchar(255),
  "description" text NOT NULL DEFAULT 'this is a discipline officially recognized by australian archery federation'
);

CREATE TABLE "category" (
  "category_id" int PRIMARY KEY,
  "discipline_id" int NOT NULL,
  "age_division_id" int NOT NULL,
  "equipment_id" int NOT NULL
);

CREATE TABLE "category_rating_percentile" (
  "archer_id" int,
  "category_id" int,
  "percentile" smallint DEFAULT 0,
  PRIMARY KEY ("archer_id", "category_id")
);

CREATE TABLE "friendship_link" (
  "account_one_id" int,
  "account_two_id" int,
  "created_at" timestamptz NOT NULL,
  PRIMARY KEY ("account_one_id", "account_two_id")
);

CREATE TABLE "block_link" (
  "account_one_id" int,
  "account_two_id" int,
  PRIMARY KEY ("account_one_id", "account_two_id")
);

CREATE TABLE "friendship_request_form" (
  "sender_id" int,
  "receiver_id" int,
  "sender_word" varchar(255) NOT NULL,
  "status" status_enum NOT NULL DEFAULT 'pending',
  PRIMARY KEY ("sender_id", "receiver_id")
);

CREATE TABLE "group_request_form" (
  "sender_id" int,
  "group_id" int,
  "sender_word" varchar(255) NOT NULL,
  "status" status_enum NOT NULL DEFAULT 'pending',
  PRIMARY KEY ("sender_id", "group_id")
);

CREATE TABLE "person_to_person_chat_history" (
  "account_one_id" int,
  "account_two_id" int,
  "message_order" int,
  "message" text NOT NULL,
  "sender_id" int NOT NULL,
  PRIMARY KEY ("account_one_id", "account_two_id", "message_order")
);

CREATE TABLE "person_to_person_old_message_visibility" (
  "account_one_id" int,
  "account_two_id" int,
  "message_order" int,
  "account_one_viewable" bool NOT NULL DEFAULT true,
  "account_two_viewable" bool NOT NULL DEFAULT true,
  PRIMARY KEY ("account_one_id", "account_two_id", "message_order")
);

CREATE TABLE "group_chat_history" (
  "group_id" int,
  "message_order" int,
  "message" int NOT NULL,
  "writer_id" int NOT NULL,
  PRIMARY KEY ("group_id", "message_order")
);

CREATE TABLE "group" (
  "group_id" int PRIMARY KEY,
  "creator_id" int NOT NULL,
  "created_at" timestamptz NOT NULL
);

CREATE TABLE "group_member" (
  "group_id" int,
  "member_id" int,
  PRIMARY KEY ("group_id", "member_id")
);

CREATE TABLE "group_old_message_visibility" (
  "group_id" int,
  "message_order" int,
  "viewable_member_id" int,
  PRIMARY KEY ("group_id", "message_order", "viewable_member_id")
);

COMMENT ON COLUMN "account"."email_address" IS 'used for authentication and as an account name when log in or sign up';

COMMENT ON COLUMN "account"."fullname" IS 'current world record for longest name existed :))';

COMMENT ON COLUMN "account"."date_of_birth" IS 'used to dynamically calculate age if needed';

COMMENT ON COLUMN "account"."avatar_url" IS 'used to user avatar picture url from supabase storage';

COMMENT ON COLUMN "account"."deactivated" IS 'deactivated accounts cannot write form to join anything, what remains is read only and history being saved';

COMMENT ON TABLE "admin" IS 'Admin are people who have rights to update account infor in account table, deactiate accounts if account is reported to behave badly, violate archery rule, or spam random trash data to database
To be a member, you need to contact DB team
';

COMMENT ON COLUMN "admin"."admin_id" IS 'not set to increment because we need to manually specify admin_id to authorize existed or just-created accounts, the rule for an account to be admin is that the account_id == admin_id';

COMMENT ON TABLE "recorder" IS 'to be a recorder, sign up and choose option "recorder"
';

COMMENT ON COLUMN "recorder"."recorder_id" IS 'not set to increment because recorder_id must be taken from account_id';

COMMENT ON COLUMN "recorder"."about_recorder" IS 'text that other people will see and you want them to know more about you as a recorder';

COMMENT ON TABLE "archer" IS 'to be an archer, sign up and choose option "archer"
';

COMMENT ON COLUMN "archer"."archer_id" IS 'not set to increment because archer_id must be taken from account_id';

COMMENT ON COLUMN "archer"."level" IS 'an archer''s self-claimed infor';

COMMENT ON COLUMN "archer"."about_archer" IS 'text that other people will see and you want them to know more about you as an archer';

COMMENT ON TABLE "australia_archery_federation" IS 'those are people who have rights to 
1) add new round in round table
2) add new range in range table, 
3) add new target face in target face table, 
4) add new discipline
5) add new age division,
6) add new equipment in equipment table, 
7) select a round to be equivalent with another round
so that recorders can use those available options to design a competition in event_context table and round_schedule table.
To be a member, you need to contact DB team
';

COMMENT ON COLUMN "australia_archery_federation"."member_id" IS 'not set to increment because we need to manually specify admin_id to authorize existed or just-created accounts, the rule for an account to be a member is that the account_id == member_id';

COMMENT ON COLUMN "event_context"."event_context_id" IS 'auto-generated id with format:competition_id-round_id-range_id-end_order, yearly_club_championship_id is not included since it can be null ';

COMMENT ON COLUMN "event_context"."yearly_club_championship_id" IS 'null if competition does not contribute to any yearly club championship';

COMMENT ON COLUMN "event_context"."end_order" IS '1 to whatsoever';

COMMENT ON COLUMN "yearly_club_championship"."eligible_group_of_club_id" IS 'null if all clubs can participate';

COMMENT ON TABLE "club_competition" IS 'if a club competition is a part of a yearly club championship (the link is expressed in event_context table), then the child (club competition) must inherit fields from its parent (yearly club championship) for consistency:
1) YYYY part in date_start and date_end must match "year" fied
2) creator_id in club_competition  == creator_id in yearly_club_championship
3) eligible_group_of_club_id in club_competition == eligible_group_of_club_id in yearly club competition
';

COMMENT ON COLUMN "club_competition"."date_start" IS 'cannot apply to participate or record after date_start';

COMMENT ON COLUMN "club_competition"."date_end" IS 'the score from a club competition is only added to help calculate category-specific global rating percentile after end_date';

COMMENT ON COLUMN "club_competition"."eligible_group_of_club_id" IS 'null if all clubs can participate';

COMMENT ON TABLE "round" IS 'there can be two rounds with same category id, their equivalence must be added by member of australia archery federation in equivalent_round table
';

COMMENT ON TABLE "equivalent_round" IS 'there are 3 conditions for 2 rounds to be considered equivalent:: 
1) con1:  same age divsion id
2) con2:  same competeting equipment
3) con3:  same discipline
';

COMMENT ON COLUMN "range"."target_face_id" IS 'type of target face used';

COMMENT ON COLUMN "request_competition_form"."round_id" IS 'nullable if registering to be a member to record since a recorder is responsible for the whole competition ';

COMMENT ON COLUMN "ai_conversation_history"."conversation_order" IS 'like starting new conversation, conversation number 1, conversation number 2,...';

COMMENT ON COLUMN "ai_conversation_history"."prompt_response_order" IS '1st prompt-message, 2nd prompt-message in a conversation';

COMMENT ON COLUMN "round_schedule"."datetime_to_start" IS 'when round starts';

COMMENT ON COLUMN "round_schedule"."expected_datetime_to_end" IS 'when a round is expected to end';

COMMENT ON COLUMN "account_report"."evidence_pdf_file_url" IS 'detailed pdf report giving evidence';

COMMENT ON TABLE "age_division" IS 'only members of australian archery federation can add new age group category. Recorders have those options available to choose when designing a competition.
';

COMMENT ON COLUMN "age_division"."min_age" IS 'minimum age to compete';

COMMENT ON TABLE "discipline" IS 'Here are some common disciplines, member of australia archery federation can add more in the future
| Discipline                 | Description / Key Features                                                                                                                                                                                                   |
| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Outdoor Target Archery** | Shooting at fixed, stationary targets outdoors at known distances. Standard format includes set number of arrows, timed ends. Distances depend on age class and bow type. ([Mount Petrie Bowmen][1])                         |
| **Indoor Target Archery**  | Similar to target archery, but shot indoors, typically at shorter distances (e.g. 18 m or 25 m). Smaller target faces. Timed ends. ([DVA][2])                                                                                |
| **Field Archery**          | Archers move through a course (often over natural terrain) with targets at various distances, heights & angles. May include known or unknown distances. ([DVA][2])                                                           |
| **Clout Archery**          | Traditional/long-distance discipline: shoot arrows "aloft" into a target laid on the ground (flat). Distances can be quite long. The target is marked by concentric scoring zones. ([DVA][2])                                |
| **Flight Archery**         | A discipline focused purely on maximum distance: how far one can shoot under certain equipment rules. ([SOPA Archery][3])                                                                                                    |
| **Para-Archery**           | For archers with disabilities. Shooting under rules allowing modifications or assistive devices. Classification determines what adaptations are allowed. Competes in individual, team/mixed events. ([paralympic.org.au][4]) |

[1]: https://brisbanearchery.org.au/about-us/archery-disciplines/?utm_source=chatgpt.com "Archery Disciplines - Mount Petrie Bowmen"
[2]: https://www.dva.asn.au/types-of-archery/?utm_source=chatgpt.com "Types of Archery - DVA"
[3]: https://sopa-archery.org.au/wp-content/uploads/2020/12/2020-Shooting-Rules-v6.0.pdf?utm_source=chatgpt.com "Archery Australia Inc"
[4]: https://www.paralympic.org.au/sports/para-archery/?utm_source=chatgpt.com "Para-archery | Paralympics Australia"

  ';

COMMENT ON TABLE "category_rating_percentile" IS 'similar to percentile, calculated from global category-specific elo rating in chess. For ex: in chess, we have 50 percentile in bliz chess, 10 percentile in classic chess ,... categories.
90 percentile means the archer id performs better than 90% of archers played in that category
formula: 
n_(archer_id): number of rounds of that category that were played by the archer id
a_(i): max score for round i that uses that category
b_(archer_id, i): actual score achieved by that archer_id after finishing round i that uses that category
c_(archer_id) = average of sum of b_(archer_id, i)/a_(i) where i goes from 0 to n of the archer id
then we have a list d = [c_(1), c_(2), ... c_(m)] where m is the total number of archers
then we make a d_sorted = [c_(2),.., c_(m), c_(1)] if c_(2) is lowest, c_(m) is secondly highest, and c_(1) is highest]
percentile of x player is c_(x) =  (   (index of c_(x) in d_sorted + 1) / m   ) * 100
note that we plus 1 because index starts from 0
';

COMMENT ON TABLE "friendship_link" IS '-- we will use the rule to make sure not to store redundant friendship link. For ex: we do not want to add a row (account_one_id = 2, account_two_id_id = 1) while there has already been an existing (account_one_id = 1, account_two_id_id = 2) row
CHECK (account_one_id < account_two_id_id)
  ';

COMMENT ON TABLE "block_link" IS 'blocking means that 2 accounts cannot send friend request, cannot send group request (group created by the account), and cannot chat
--we will use the rule to make sure not to store redundant person-to-person block link.
CHECK (account_one_id < account_two_id)
  ';

COMMENT ON TABLE "person_to_person_chat_history" IS '--we will use the rule to make sure not to store redundant person-to-person chat link.
CHECK (account_one_id < account_two_id)
  ';

COMMENT ON TABLE "person_to_person_old_message_visibility" IS 'the messages that have been deleted from account 1 can still be viewed by account 2 thank to the table
  ';

COMMENT ON TABLE "group_old_message_visibility" IS 'this table allows other members to still view messages that have been deleted by an account id
';

ALTER TABLE "archer" ADD FOREIGN KEY ("archer_id") REFERENCES "account" ("account_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "recorder" ADD FOREIGN KEY ("recorder_id") REFERENCES "account" ("account_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "admin" ADD FOREIGN KEY ("admin_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "australia_archery_federation" ADD FOREIGN KEY ("member_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "participating" ADD FOREIGN KEY ("participating_id") REFERENCES "archer" ("archer_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "participating" ADD FOREIGN KEY ("event_context_id") REFERENCES "event_context" ("event_context_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "event_context" ADD FOREIGN KEY ("yearly_club_championship_id") REFERENCES "yearly_club_championship" ("yearly_club_championship_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "event_context" ADD FOREIGN KEY ("club_competition_id") REFERENCES "club_competition" ("club_competition_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "event_context" ADD FOREIGN KEY ("round_id") REFERENCES "round" ("round_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "event_context" ADD FOREIGN KEY ("range_id") REFERENCES "range" ("range_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "archer" ADD FOREIGN KEY ("club_id") REFERENCES "club" ("club_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "club" ADD CONSTRAINT "each_archer_can_create_more_than_one_club" FOREIGN KEY ("creator_id") REFERENCES "archer" ("archer_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "request_competition_form" ADD CONSTRAINT "want_to_participate" FOREIGN KEY ("sender_id") REFERENCES "archer" ("archer_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "request_competition_form" ADD CONSTRAINT "want_to_be_member_of_that_competition_to_record" FOREIGN KEY ("sender_id") REFERENCES "recorder" ("recorder_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "request_competition_form" ADD FOREIGN KEY ("club_competition_id") REFERENCES "club_competition" ("club_competition_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "request_competition_form" ADD FOREIGN KEY ("round_id") REFERENCES "round" ("round_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "request_competition_form" ADD CONSTRAINT "reviewed_by_the_recorder_who_is_the_creator_of_an_event" FOREIGN KEY ("reviewed_by") REFERENCES "recorder" ("recorder_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "archer" ADD FOREIGN KEY ("default_equipment_id") REFERENCES "equipment" ("equipment_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "category" ADD FOREIGN KEY ("equipment_id") REFERENCES "equipment" ("equipment_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "range" ADD FOREIGN KEY ("target_face_id") REFERENCES "target_face" ("target_face_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "recording" ADD FOREIGN KEY ("club_competition_id") REFERENCES "club_competition" ("club_competition_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "recording" ADD FOREIGN KEY ("recording_id") REFERENCES "recorder" ("recorder_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "club_enrollment_form" ADD FOREIGN KEY ("sender_id") REFERENCES "archer" ("archer_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "club_enrollment_form" ADD FOREIGN KEY ("club_id") REFERENCES "club" ("club_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "ai_conversation_history" ADD FOREIGN KEY ("account_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "equivalent_round" ADD FOREIGN KEY ("round_id") REFERENCES "round" ("round_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "equivalent_round" ADD FOREIGN KEY ("equivalent_round_id") REFERENCES "round" ("round_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "yearly_club_championship" ADD CONSTRAINT "create_yearly_club_championship" FOREIGN KEY ("creator_id") REFERENCES "recorder" ("recorder_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "club_competition" ADD CONSTRAINT "create_club_competition" FOREIGN KEY ("creator_id") REFERENCES "recorder" ("recorder_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "eligible_club_member" ADD FOREIGN KEY ("eligible_club_id") REFERENCES "club" ("club_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "yearly_club_championship" ADD FOREIGN KEY ("eligible_group_of_club_id") REFERENCES "eligible_group_of_club" ("eligible_group_of_club_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "club_competition" ADD FOREIGN KEY ("eligible_group_of_club_id") REFERENCES "eligible_group_of_club" ("eligible_group_of_club_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "round_schedule" ADD FOREIGN KEY ("club_competition_id") REFERENCES "club_competition" ("club_competition_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "round_schedule" ADD FOREIGN KEY ("round_id") REFERENCES "round" ("round_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "account_report" ADD FOREIGN KEY ("reporter_id") REFERENCES "account" ("account_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "account_report" ADD FOREIGN KEY ("decision_made_by") REFERENCES "admin" ("admin_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "category" ADD FOREIGN KEY ("age_division_id") REFERENCES "age_division" ("age_division_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "category" ADD FOREIGN KEY ("discipline_id") REFERENCES "discipline" ("discipline_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "round" ADD FOREIGN KEY ("category_id") REFERENCES "category" ("category_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "category_rating_percentile" ADD FOREIGN KEY ("archer_id") REFERENCES "archer" ("archer_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "category_rating_percentile" ADD FOREIGN KEY ("category_id") REFERENCES "category" ("category_id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "friendship_request_form" ADD FOREIGN KEY ("sender_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "friendship_link" ADD FOREIGN KEY ("account_one_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "friendship_link" ADD FOREIGN KEY ("account_two_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "group" ADD FOREIGN KEY ("creator_id") REFERENCES "account" ("account_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "group_member" ADD FOREIGN KEY ("member_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "group_member" ADD FOREIGN KEY ("group_id") REFERENCES "group" ("group_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "group_chat_history" ADD FOREIGN KEY ("group_id") REFERENCES "group" ("group_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "group_old_message_visibility" ADD FOREIGN KEY ("group_id") REFERENCES "group" ("group_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "group_request_form" ADD FOREIGN KEY ("sender_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "group_request_form" ADD FOREIGN KEY ("group_id") REFERENCES "group" ("group_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "person_to_person_old_message_visibility" ADD FOREIGN KEY ("account_one_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "person_to_person_old_message_visibility" ADD FOREIGN KEY ("account_two_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "person_to_person_chat_history" ADD FOREIGN KEY ("account_one_id") REFERENCES "account" ("account_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "person_to_person_chat_history" ADD FOREIGN KEY ("account_two_id") REFERENCES "account" ("account_id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "block_link" ADD FOREIGN KEY ("account_one_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "block_link" ADD FOREIGN KEY ("account_two_id") REFERENCES "account" ("account_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "eligible_club_member" ADD FOREIGN KEY ("eligible_group_of_club_id") REFERENCES "eligible_group_of_club" ("eligible_group_of_club_id") ON DELETE RESTRICT ON UPDATE CASCADE;
